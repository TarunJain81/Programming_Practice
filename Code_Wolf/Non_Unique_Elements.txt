Non Unique Elements. Write a program which finds the non-unique elements of an array of signed integers.

The resulting array can be in any order.

Your answer may be a snippet which assumes the input to be stored in a variable (d, say) and evaluates to the

correct result.

Test Cases

[] => []

[-1, 0, 1] => []

[1, 1] => [1]

[3, 0, 0, 1, 1, 0, 5, 3] => [3, 0, 1]

[-34, 0, 1, -34, 4, 8, 4] => [-34, 4]

Order of the elements doesn't matter.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ISAM5430_Class03.Fall2016
{
    class Problem20
    {
        static Dictionary<int, int> repeat = new Dictionary<int, int>();
       public static void Main()
        {
            List<int> result = duplicate(new[] { -34,0,1,-34,4,8,4 });
            foreach (var r in result)
                Console.WriteLine(r);
            Console.ReadLine();


        }

        public static List<int> duplicate(int[] array)
        {
            for(int i=0;i<array.Length;i++)
            {
                if (repeat.ContainsKey(array[i]))
                {
                    repeat[array[i]] = repeat[array[i]] + 1 ;
                }
                else
                    repeat.Add(array[i], 1);
            }

            List<int> result = new List<int>();
            int j = 0;
            foreach(var d in repeat)
            {
                if (d.Value > 1)
                {
                    result.Add(d.Key);
                   
                }

            }
            return result;
        }

        }
}
